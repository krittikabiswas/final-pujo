/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AnjoliDAO","structs":{},"methods":[{"name":"create","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":["NoOp"]},"readonly":false,"desc":"Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA\nand stores the created asset id into `self.token_id`.","events":[],"recommendations":{}},{"name":"donate","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return.","events":[],"recommendations":{}},{"name":"get_asset_id","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the Asset ID of the token minted by this contract (0 if not yet created).","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    AnjoliDAO ARC-4 contract (Algorand Python / Puya).\n    - On create: mints the \"Anjoli Token\" ASA and saves its id to contract state.\n    - donate(): accepts a direct payment to the app call and sends ANJ tokens back.\n    ","networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"token_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW5faWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[84,106,118],"errorMessage":"OnCompletion is not NoOp"},{"pc":[87,109],"errorMessage":"can only call when not creating"},{"pc":[186,225],"errorMessage":"check self.token_id exists"},{"pc":[205],"errorMessage":"donation too small for any ANJ"},{"pc":[198],"errorMessage":"payment must be to app address"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAGAreIEAyYDCHRva2VuX2lkA0FOSgxBbmpvbGkgVG9rZW4xGEAAAygiZzEbQQAcggMETFxhugS8D/n3BFuiKoQ2GgCOAwAkABgAAiJDMRkURDEYRIgAgxaABBUffHVMULAjQzEZFEQxGESIAEYjQzEZFESIAAIjQ7EyCkmyKrIpIrIjJLIiKbIlKrImJbIQIrIBs7EyCkmyKrIpIrIjJLIiKbIlKrImJbIQIrIBsyi0PGeJIihlRElEMQAxCDEHMgoSRIGgjQYKSUSxshKyFLIRgQSyECKyAbOJIihlRIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AnjoliDao contract
 */
export type AnjoliDaoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create()void': Record<string, never>
    'donate()void': Record<string, never>
    'get_asset_id()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create()void': []
    'donate()void': []
    'get_asset_id()uint64': []
  }
}

/**
 * The return type for each method
 */
export type AnjoliDaoReturns = {
  'create()void': void
  'donate()void': void
  'get_asset_id()uint64': bigint
}

/**
 * Defines the types of available calls and state of the AnjoliDao smart contract.
 */
export type AnjoliDaoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create()void' | 'create', {
      argsObj: AnjoliDaoArgs['obj']['create()void']
      argsTuple: AnjoliDaoArgs['tuple']['create()void']
      returns: AnjoliDaoReturns['create()void']
    }>
    & Record<'donate()void' | 'donate', {
      argsObj: AnjoliDaoArgs['obj']['donate()void']
      argsTuple: AnjoliDaoArgs['tuple']['donate()void']
      returns: AnjoliDaoReturns['donate()void']
    }>
    & Record<'get_asset_id()uint64' | 'get_asset_id', {
      argsObj: AnjoliDaoArgs['obj']['get_asset_id()uint64']
      argsTuple: AnjoliDaoArgs['tuple']['get_asset_id()uint64']
      returns: AnjoliDaoReturns['get_asset_id()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        tokenId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AnjoliDaoSignatures = keyof AnjoliDaoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AnjoliDaoNonVoidMethodSignatures = keyof AnjoliDaoTypes['methods'] extends infer T ? T extends keyof AnjoliDaoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AnjoliDao smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AnjoliDaoSignatures> = AnjoliDaoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AnjoliDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AnjoliDaoSignatures> = AnjoliDaoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AnjoliDaoTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AnjoliDaoCreateCallParams =
  | Expand<CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & {method: 'create()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AnjoliDaoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AnjoliDaoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AnjoliDao smart contract
 */
export abstract class AnjoliDaoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AnjoliDaoCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create()void':
            return AnjoliDaoParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AnjoliDAO smart contract using the create()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create()void ABI method
   *
  * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
  and stores the created asset id into `self.token_id`.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static create(params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the donate()void ABI method
   *
   * Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static donate(params: CallParams<AnjoliDaoArgs['obj']['donate()void'] | AnjoliDaoArgs['tuple']['donate()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'donate()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_asset_id()uint64 ABI method
   *
   * Returns the Asset ID of the token minted by this contract (0 if not yet created).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetId(params: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_id()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AnjoliDAO smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AnjoliDaoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AnjoliDaoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AnjoliDaoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AnjoliDaoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AnjoliDAO smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AnjoliDaoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AnjoliDaoParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AnjoliDaoCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AnjoliDaoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AnjoliDAO smart contract using the create()void ABI method.
       *
      * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
      and stores the created asset id into `self.token_id`.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(AnjoliDaoParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AnjoliDAO smart contract using the create()void ABI method.
       *
      * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
      and stores the created asset id into `self.token_id`.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(AnjoliDaoParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AnjoliDAO smart contract using an ABI method call using the create()void ABI method.
       *
      * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
      and stores the created asset id into `self.token_id`.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(AnjoliDaoParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AnjoliDaoReturns['create()void']) }, appClient: new AnjoliDaoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AnjoliDAO smart contract
 */
export class AnjoliDaoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AnjoliDaoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AnjoliDao app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AnjoliDaoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AnjoliDaoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AnjoliDaoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AnjoliDaoClient> {
    return new AnjoliDaoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AnjoliDaoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AnjoliDaoClient> {
    return new AnjoliDaoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AnjoliDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `create()void` ABI method.
     *
    * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
    and stores the created asset id into `self.token_id`.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    create: (params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AnjoliDaoParamsFactory.create(params))
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `donate()void` ABI method.
     *
     * Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    donate: (params: CallParams<AnjoliDaoArgs['obj']['donate()void'] | AnjoliDaoArgs['tuple']['donate()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AnjoliDaoParamsFactory.donate(params))
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `get_asset_id()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the Asset ID of the token minted by this contract (0 if not yet created).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetId: (params: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AnjoliDaoParamsFactory.getAssetId(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AnjoliDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `create()void` ABI method.
     *
    * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
    and stores the created asset id into `self.token_id`.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    create: (params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AnjoliDaoParamsFactory.create(params))
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `donate()void` ABI method.
     *
     * Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    donate: (params: CallParams<AnjoliDaoArgs['obj']['donate()void'] | AnjoliDaoArgs['tuple']['donate()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AnjoliDaoParamsFactory.donate(params))
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `get_asset_id()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the Asset ID of the token minted by this contract (0 if not yet created).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetId: (params: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AnjoliDaoParamsFactory.getAssetId(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AnjoliDAO smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `create()void` ABI method.
     *
    * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
    and stores the created asset id into `self.token_id`.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    create: async (params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AnjoliDaoParamsFactory.create(params))
      return {...result, return: result.return as unknown as (undefined | AnjoliDaoReturns['create()void'])}
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `donate()void` ABI method.
     *
     * Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    donate: async (params: CallParams<AnjoliDaoArgs['obj']['donate()void'] | AnjoliDaoArgs['tuple']['donate()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AnjoliDaoParamsFactory.donate(params))
      return {...result, return: result.return as unknown as (undefined | AnjoliDaoReturns['donate()void'])}
    },

    /**
     * Makes a call to the AnjoliDAO smart contract using the `get_asset_id()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the Asset ID of the token minted by this contract (0 if not yet created).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetId: async (params: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AnjoliDaoParamsFactory.getAssetId(params))
      return {...result, return: result.return as unknown as (undefined | AnjoliDaoReturns['get_asset_id()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AnjoliDaoClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AnjoliDAO smart contract using the `get_asset_id()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the Asset ID of the token minted by this contract (0 if not yet created).
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetId(params: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AnjoliDaoParamsFactory.getAssetId(params))
    return result.return as unknown as AnjoliDaoReturns['get_asset_id()uint64']
  }

  /**
   * Methods to access state for the current AnjoliDAO app
   */
  state = {
    /**
     * Methods to access global state for the current AnjoliDAO app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          tokenId: result.token_id,
        }
      },
      /**
       * Get the current value of the token_id key in global state
       */
      tokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token_id")) as bigint | undefined },
    },
  }

  public newGroup(): AnjoliDaoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create()void method call against the AnjoliDAO contract
       */
      create(params: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.create(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a donate()void method call against the AnjoliDAO contract
       */
      donate(params: CallParams<AnjoliDaoArgs['obj']['donate()void'] | AnjoliDaoArgs['tuple']['donate()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.donate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_id()uint64 method call against the AnjoliDAO contract
       */
      getAssetId(params: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetId(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_id()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the AnjoliDAO contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AnjoliDaoComposer
  }
}
export type AnjoliDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create()void ABI method.
   *
  * Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA
  and stores the created asset id into `self.token_id`.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(params?: CallParams<AnjoliDaoArgs['obj']['create()void'] | AnjoliDaoArgs['tuple']['create()void']>): AnjoliDaoComposer<[...TReturns, AnjoliDaoReturns['create()void'] | undefined]>

  /**
   * Calls the donate()void ABI method.
   *
   * Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donate(params?: CallParams<AnjoliDaoArgs['obj']['donate()void'] | AnjoliDaoArgs['tuple']['donate()void']>): AnjoliDaoComposer<[...TReturns, AnjoliDaoReturns['donate()void'] | undefined]>

  /**
   * Calls the get_asset_id()uint64 ABI method.
   *
   * Returns the Asset ID of the token minted by this contract (0 if not yet created).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetId(params?: CallParams<AnjoliDaoArgs['obj']['get_asset_id()uint64'] | AnjoliDaoArgs['tuple']['get_asset_id()uint64']>): AnjoliDaoComposer<[...TReturns, AnjoliDaoReturns['get_asset_id()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AnjoliDAO smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AnjoliDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AnjoliDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AnjoliDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AnjoliDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AnjoliDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AnjoliDaoComposerResults<TReturns>>
}
export type AnjoliDaoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

