{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "donate()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_id()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "token_id": {
                    "type": "uint64",
                    "key": "token_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AnjoliDAO",
        "desc": "\n    AnjoliDAO ARC-4 contract (Algorand Python / Puya).\n    - On create: mints the \"Anjoli Token\" ASA and saves its id to contract state.\n    - donate(): accepts a direct payment to the app call and sends ANJ tokens back.\n    ",
        "methods": [
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Runs on creation (when called as the create/constructor). Mints the Anjoli Token ASA\nand stores the created asset id into `self.token_id`."
            },
            {
                "name": "donate",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Lets a user donate ALGO in the same call (single transaction) and receive ANJ in return."
            },
            {
                "name": "get_asset_id",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Returns the Asset ID of the token minted by this contract (0 if not yet created)."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}